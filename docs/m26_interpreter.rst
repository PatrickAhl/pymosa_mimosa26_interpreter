
Installation
=============

Install the required packages:

.. code-block:: bash

   conda install numba numpy tables matplotlib tqdm

Then install the Mimosa26 interpreter:

.. code-block:: bash

   python setup.py develop



.. toctree::
   :numbered:

Introduction
=============

This package makes it possible to interpret Mimosa26 raw data recorded with `pymosa <https://github.com/SiLab-Bonn/pymosa>`_. The event building is done using the trigger words from the TLU.
Due to the fact that `pymosa <https://github.com/SiLab-Bonn/pymosa>`_ features continuous and trigger-less readout of the Mimosa26 sensors the event building is not straight forward.
Within this package the event building is done by assigning trigger words (from TLU) to data of one Mimosa26 frame, see the event building section.

Notes:
 - Due to the fact that trigger words have to be assigned to Mimosa26 frame data it is mandatory to choose the combined
   (15 bit trigger timestamp and 16 bit trigger number) trigger data format (trigger data format : 2).
   This is default data format used in `pymosa <https://github.com/SiLab-Bonn/pymosa>`_.


Raw data interpretation
========================

The result of the raw data analysis is stored into a hit table containing events of all Mimosa26 planes. The event building is done using the TLU words (see Event building section)
Additionally, for each plane an occupancy map is stored and an event status histogram is created.

The raw data structure of Mimosa26 data looks as follows:
 - Frame header HIGH and LOW (contains timestamp, generated from R/O, indicates the start of a Mimosa26 frame)
 - Frame number HIGH and LOW (frame number of Mimosa26)
 - Frame length HIGH and LOW (number of Mimosa26)
 - Hit data (column and row of hit pixel)
 - ...
 - ...
 - Frame tailer HIGH and LOW (indicates the end of a Mimosa26 frame)


Every Mimosa26 raw data word (32 bit) is composed as follows

+----------------+--------------------+----+-----------------+------------------+--------------------+
| HEADER (8 bit) | IDENTYFIER (4 bit) | 00 |  DATA_LOST_FLAG | FRAME_START_FLAG | DATA WORD (16 bit) |
+----------------+--------------------+----+-----------------+------------------+--------------------+

The trigger word (32 bit) is composed as follows

+--------------------+--------------------+
| HEADER (1 bit) = 1 | DATA WORD (31 bit) |
+--------------------+--------------------+


 Note:
  - HEADER = 0x20 (from R/0)
  - IDENTYFIER = 1 - 6 (plane identyfier, from R/0)
  - FRAME_START_FLAG (from R/0 is HIGH if new Mimosa26 frame has started. For this the MKD signal of Mimosa26 is used, which is HIGH for four clock cycles.
    every time a new frame starts. Else the FRAME_START_FLAG is LOW.
  - DATA WORD (from Mimosa26) can be one of the following: Frame header, frame number, frame length, hit data or frame tailer.
  - The frame header HIGH and LOW word contains a timestamp (40 MHz) which is generated by the R/O system.
  - DATA WORD (from TLU) is 15 bit trigger timestamp (from R/0) and 16 bit trigger number (from TLU) in combined data format.


Event building
===============

In order to explain the event building it is referred to :numref:`m26_readout` displaying the rolling shutter readout of Mimosa26. The frame line marks the beginning of a frame which lasts (115.2 us). At this time the readout (integration time)
of row 0 is enabled for one frame duration. Consequently, at some point (x clock cycles) the integration time of row n is enabled. The frame is finished with enabling the integration time
of row 576. Data of the mentioned row-n-readout will appear one frame later (at frame 3) in the data stream.
Thus the actual integration time window can be estimated by re-calculating the start timestamp and stop timestamp of the readout window. The start timestamp (in units of 40 MHz clock cycles) is calculated by

.. math::
   T_\text{start} = (\text{frame id of data} - 2) \times f_0 + \text{row} \times r_0 - T_\text{offset}

with :math:`f_0 = 115.2 \times 40` being the clock cycles for one frame and :math:`r_0 = \frac{115.2}{567} \times 40` being the clock cycles for one row readout. The offset :math:`T_\text{offset} = 48` respects the fact
that it needs some time (a few clock cycles) until the Mimosa26 data is sent out (after the next frame).
In analogy to this the stop timestamp of the integration time is calculated by

.. math::
   T_\text{stop} = T_\text{start} + f_0 + T_\text{offset}.

Using the readout window for each row (frame) data for every readout window one (or multiple) trigger timestamp(s) can be assigned to it, if the trigger timestamp lies within this specific row window.
In this way to each Mimosa26 frame data a trigger timestamp is assigned defining one event.

Due to the fact that the trigger timestamp is only 15 bit it will be extended using the MSB (16 bit) from Mimosa26 frame timestamp. Consequently a 32 bit timestamp is obtained
which is aligned to the Mimosa26 frame timestamp.

.. _m26_readout:
.. figure:: _static/M26_event_building.png
    :width: 800px
    :align: center
    :alt: alternate text

Event stati
===============

The following table shows the possible event stati (8 bit):

+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
|         Error name         | Error code | Explanation                                                                                             |
+============================+============+=========================================================================================================+
|    TRIGGER_NUMBER_ERROR    | 0x00000001 | Trigger number increased not by one                                                                     |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
|   NO_TRIGGER_WORD_ERROR    | 0x00000002 | Trigger word is missing (assumed from jump in trigger number)                                           |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
| TRIGGER_TIMESTAMP_OVERFLOW | 0x00000004 | Overflow of (15 bit) trigger timestamp                                                                  |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
|   TRIGGER_NUMBER_OVERFLOW  | 0x00000008 | Overflow of (16 bit) trigger number                                                                     |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
|         DATA_ERROR         | 0x00000010 | Any data error in the Mimosa26 protocol (e.g., invalid column/row, data loss, invalid data length, ...) |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
|     TIMESTAMP_OVERFLOW     | 0x00000020 | Overflow of (32 bit) Mimosa26 frame timestamp                                                           |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
|      FRAME_ID_OVERFLOW     | 0x00000040 | Overflow of (32 bit) Mimosa26 frame number                                                              |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+
|       OVERFLOW_FLAG        | 0x00000080 | Overflow flag for particular Mimosa26 row                                                               |
+----------------------------+------------+---------------------------------------------------------------------------------------------------------+


Methods
-------

.. autofunction:: pymosa_mimosa26_interpreter.raw_data_interpreter._interpret_raw_data
.. autofunction:: pymosa_mimosa26_interpreter.raw_data_interpreter._build_events

Usage
======

The data interpreter provides an easy-to-use interface and encapsulates the rather complicated raw data interpretation and event building.
.. example-code::

    with data_interpreter.DataInterpreter(raw_data_file=raw_data_file, trigger_data_format=trigger_data_format) as raw_data_analysis:
            raw_data_analysis.create_hit_table = True
            raw_data_analysis.interpret_word_table()  # interpret raw data


A full example which interpretes the raw data and converts the hit tables into a data format which can be used for testbeam analysis is located in the example folder.

Methods
-------

.. autoclass:: pymosa_mimosa26_interpreter.data_interpreter.DataInterpreter


